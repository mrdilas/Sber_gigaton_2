import pdfplumber
import pandas as pd
import sys
import time
from typing import Dict, List, Any

def print_progress(current: int, total: int, status: str = ""):
    """
    –í—ã–≤–æ–¥–∏—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä –≤ –∫–æ–Ω—Å–æ–ª—å
    
    Args:
        current (int): –¢–µ–∫—É—â–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å
        total (int): –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
        status (str): –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å
    """
    bar_length = 40
    progress = float(current) / float(total) if total > 0 else 0
    block = int(round(bar_length * progress))
    progress_bar = "[" + "=" * block + " " * (bar_length - block) + "]"
    
    percent = progress * 100
    text = f"\r–û–±—Ä–∞–±–æ—Ç–∫–∞: {progress_bar} {percent:.1f}% ({current}/{total}) {status}"
    
    sys.stdout.write(text)
    sys.stdout.flush()

def extract_text_from_pdf(pdf_path: str) -> str:
    """
    –ò–∑–≤–ª–µ–∫–∞–µ—Ç –≤–µ—Å—å —Ç–µ–∫—Å—Ç –∏–∑ PDF —Ñ–∞–π–ª–∞ —Å –≤—ã–≤–æ–¥–æ–º –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
    
    Args:
        pdf_path (str): –ü—É—Ç—å –∫ PDF —Ñ–∞–π–ª—É
        
    Returns:
        str: –ò–∑–≤–ª–µ—á–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
    """
    full_text = ""
    
    try:
        with pdfplumber.open(pdf_path) as pdf:
            total_pages = len(pdf.pages)
            print(f"–ù–∞—á–∞—Ç–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞: {total_pages} —Å—Ç—Ä–∞–Ω–∏—Ü")
            
            for page_num, page in enumerate(pdf.pages, 1):
                # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
                print_progress(page_num, total_pages, f"–°—Ç—Ä–∞–Ω–∏—Ü–∞ {page_num}: –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞")
                
                # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç —Å–æ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
                page_text = page.extract_text()
                if page_text:
                    full_text += f"--- –°—Ç—Ä–∞–Ω–∏—Ü–∞ {page_num} ---\n{page_text}\n\n"
                
                # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
                time.sleep(0.1)
                    
            print(f"\n‚úÖ –¢–µ–∫—Å—Ç —É—Å–ø–µ—à–Ω–æ –∏–∑–≤–ª–µ—á–µ–Ω —Å–æ –≤—Å–µ—Ö {total_pages} —Å—Ç—Ä–∞–Ω–∏—Ü")
            
    except Exception as e:
        raise Exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–∏ —Ç–µ–∫—Å—Ç–∞: {str(e)}")
    
    return full_text

def extract_tables_from_pdf(pdf_path: str) -> Dict[str, Any]:
    """
    –ò–∑–≤–ª–µ–∫–∞–µ—Ç —Ç–∞–±–ª–∏—Ü—ã –∏–∑ PDF —Ñ–∞–π–ª–∞ —Å –≤—ã–≤–æ–¥–æ–º –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
    
    Args:
        pdf_path (str): –ü—É—Ç—å –∫ PDF —Ñ–∞–π–ª—É
        
    Returns:
        dict: –°–ª–æ–≤–∞—Ä—å —Å —Ç–∞–±–ª–∏—Ü–∞–º–∏ –≤ —Ä–∞–∑–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–∞—Ö
    """
    tables_data = {
        "tables_text": [],  # –¢–∞–±–ª–∏—Ü—ã –≤ —Ç–µ–∫—Å—Ç–æ–≤–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
        "tables_dataframes": [],  # –¢–∞–±–ª–∏—Ü—ã –∫–∞–∫ DataFrame
        "tables_details": []  # –î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–∞–±–ª–∏—Ü–∞—Ö
    }
    
    try:
        with pdfplumber.open(pdf_path) as pdf:
            total_pages = len(pdf.pages)
            total_tables = 0
            
            print(f"\n–ù–∞—á–∞—Ç–æ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü...")
            
            for page_num, page in enumerate(pdf.pages, 1):
                # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –¥–ª—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã
                status = f"–°—Ç—Ä–∞–Ω–∏—Ü–∞ {page_num}: –ø–æ–∏—Å–∫ —Ç–∞–±–ª–∏—Ü"
                print_progress(page_num, total_pages, status)
                
                # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã —Å–æ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
                tables = page.extract_tables()
                page_tables_count = 0
                
                for table_num, table in enumerate(tables, 1):
                    if table and any(any(cell is not None and str(cell).strip() for cell in row) for row in table):
                        page_tables_count += 1
                        total_tables += 1
                        
                        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–∞–±–ª–∏—Ü—É –∫–∞–∫ —Ç–µ–∫—Å—Ç
                        table_text = format_table_as_text(table, page_num, table_num)
                        tables_data["tables_text"].append(table_text)
                        
                        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–∞–±–ª–∏—Ü—É –∫–∞–∫ DataFrame
                        df = pd.DataFrame(table)
                        tables_data["tables_dataframes"].append({
                            "page": page_num,
                            "table_number": table_num,
                            "dataframe": df
                        })
                        
                        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
                        tables_data["tables_details"].append({
                            "page": page_num,
                            "table_number": table_num,
                            "rows": len(table),
                            "columns": len(table[0]) if table else 0
                        })
                
                # –í—ã–≤–æ–¥–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–∞–±–ª–∏—Ü–∞—Ö –Ω–∞ —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ
                if page_tables_count > 0:
                    print(f"\rüìä –°—Ç—Ä–∞–Ω–∏—Ü–∞ {page_num}: –Ω–∞–π–¥–µ–Ω–æ {page_tables_count} —Ç–∞–±–ª–∏—Ü" + " " * 50)
                else:
                    print(f"\rüìÑ –°—Ç—Ä–∞–Ω–∏—Ü–∞ {page_num}: —Ç–∞–±–ª–∏—Ü –Ω–µ –Ω–∞–π–¥–µ–Ω–æ" + " " * 50)
                
                time.sleep(0.1)
            
            print(f"\n‚úÖ –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü –∑–∞–≤–µ—Ä—à–µ–Ω–æ. –í—Å–µ–≥–æ –Ω–∞–π–¥–µ–Ω–æ: {total_tables} —Ç–∞–±–ª–∏—Ü")
            
    except Exception as e:
        raise Exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–∏ —Ç–∞–±–ª–∏—Ü: {str(e)}")
    
    return tables_data

def format_table_as_text(table: List[List[str]], page_num: int, table_num: int) -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ç–∞–±–ª–∏—Ü—É –≤ —á–∏—Ç–∞–µ–º—ã–π —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç
    
    Args:
        table (list): –î–∞–Ω–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã
        page_num (int): –ù–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        table_num (int): –ù–æ–º–µ—Ä —Ç–∞–±–ª–∏—Ü—ã
        
    Returns:
        str: –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞ –∫–∞–∫ —Ç–µ–∫—Å—Ç
    """
    if not table:
        return ""
    
    # –§–∏–ª—å—Ç—Ä—É–µ–º –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏
    filtered_table = []
    for row in table:
        if any(cell is not None and str(cell).strip() for cell in row):
            filtered_table.append([str(cell) if cell is not None else "" for cell in row])
    
    if not filtered_table:
        return ""
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é —à–∏—Ä–∏–Ω—É –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å—Ç–æ–ª–±—Ü–∞
    col_widths = []
    for col in range(len(filtered_table[0])):
        max_width = max(len(str(row[col])) if col < len(row) else 0 for row in filtered_table)
        col_widths.append(max_width + 2)  # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç—Å—Ç—É–ø
    
    # –°–æ–∑–¥–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Ç–∞–±–ª–∏—Ü—ã
    table_text = f"üìã –¢–∞–±–ª–∏—Ü–∞ {table_num} (–°—Ç—Ä–∞–Ω–∏—Ü–∞ {page_num}):\n"
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å
    separator = "+" + "+".join("-" * width for width in col_widths) + "+\n"
    table_text += separator
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç—Ä–æ–∫–∏ —Ç–∞–±–ª–∏—Ü—ã
    for row in filtered_table:
        row_text = "|"
        for i, cell in enumerate(row):
            if i < len(col_widths):
                cell_content = str(cell) if cell is not None else ""
                row_text += f" {cell_content:<{col_widths[i]-2}} |"
        table_text += row_text + "\n"
        table_text += separator
    
    return table_text + "\n"

def combine_text_and_tables(text_content: str, tables_data: Dict[str, Any]) -> str:
    """
    –û–±—ä–µ–¥–∏–Ω—è–µ—Ç —Ç–µ–∫—Å—Ç –∏ —Ç–∞–±–ª–∏—Ü—ã –≤ –µ–¥–∏–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    
    Args:
        text_content (str): –ò–∑–≤–ª–µ—á–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
        tables_data (dict): –î–∞–Ω–Ω—ã–µ —Ç–∞–±–ª–∏—Ü
        
    Returns:
        str: –û–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    """
    print("\nüìù –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∏—Ç–æ–≥–æ–≤–æ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞...")
    
    result = "=== –¢–ï–ö–°–¢ –î–û–ö–£–ú–ï–ù–¢–ê ===\n\n"
    result += text_content
    result += "\n\n=== –¢–ê–ë–õ–ò–¶–´ –î–û–ö–£–ú–ï–ù–¢–ê ===\n\n"
    
    # –î–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ —Ç–∞–±–ª–∏—Ü—ã –≤ —Ç–µ–∫—Å—Ç–æ–≤–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
    for i, table_text in enumerate(tables_data["tables_text"], 1):
        result += table_text
        print_progress(i, len(tables_data["tables_text"]), f"–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü")
        time.sleep(0.05)
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    result += f"\n=== –°–¢–ê–¢–ò–°–¢–ò–ö–ê –û–ë–†–ê–ë–û–¢–ö–ò ===\n"
    result += f"–í—Å–µ–≥–æ —Ç–∞–±–ª–∏—Ü –Ω–∞–π–¥–µ–Ω–æ: {len(tables_data['tables_text'])}\n"
    result += f"–í—Å–µ–≥–æ —Å—Ç—Ä–∞–Ω–∏—Ü –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {len(set(detail['page'] for detail in tables_data['tables_details']))}\n"
    
    for detail in tables_data["tables_details"]:
        result += (f"–¢–∞–±–ª–∏—Ü–∞ {detail['table_number']} (—Å—Ç—Ä. {detail['page']}): "
                  f"{detail['rows']} —Å—Ç—Ä–æ–∫, {detail['columns']} —Å—Ç–æ–ª–±—Ü–æ–≤\n")
    
    print(f"\n‚úÖ –ò—Ç–æ–≥–æ–≤—ã–π –¥–æ–∫—É–º–µ–Ω—Ç —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω")
    
    return result

def process_pdf_to_txt(pdf_file_path: str) -> str:
    """
    –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ PDF —Ñ–∞–π–ª–∞ –∏ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –≤ TXT
    
    Args:
        pdf_file_path (str): –ü—É—Ç—å –∫ PDF —Ñ–∞–π–ª—É –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
        
    Returns:
        str: –û–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º —Ç–∞–±–ª–∏—Ü –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        
    Raises:
        FileNotFoundError: –ï—Å–ª–∏ —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω
        Exception: –ü—Ä–∏ –æ—à–∏–±–∫–∞—Ö –æ–±—Ä–∞–±–æ—Ç–∫–∏ PDF
    """
    import os
    
    print("üöÄ –ó–∞–ø—É—Å–∫ –æ–±—Ä–∞–±–æ—Ç–∫–∏ PDF –¥–æ–∫—É–º–µ–Ω—Ç–∞...")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
    if not os.path.exists(pdf_file_path):
        raise FileNotFoundError(f"–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {pdf_file_path}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ —Ñ–∞–π–ª–∞
    if not pdf_file_path.lower().endswith('.pdf'):
        raise ValueError("–§–∞–π–ª –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ PDF")
    
    try:
        # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç
        text_content = extract_text_from_pdf(pdf_file_path)
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã
        tables_data = extract_tables_from_pdf(pdf_file_path)
        
        # –û–±—ä–µ–¥–∏–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        final_result = combine_text_and_tables(text_content, tables_data)
        
        print(f"\nüéâ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
        print(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç: {len(text_content)} —Å–∏–º–≤–æ–ª–æ–≤ —Ç–µ–∫—Å—Ç–∞, {len(tables_data['tables_text'])} —Ç–∞–±–ª–∏—Ü")
        
        return final_result
        
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ PDF —Ñ–∞–π–ª–∞: {str(e)}")
        raise

def save_result_to_txt(result_text: str, output_path: str) -> None:
    """
    –°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ TXT —Ñ–∞–π–ª
    
    Args:
        result_text (str): –¢–µ–∫—Å—Ç –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
        output_path (str): –ü—É—Ç—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–∞
    """
    print(f"\nüíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –≤ —Ñ–∞–π–ª: {output_path}")
    
    with open(output_path, 'w', encoding='utf-8') as f:
        f.write(result_text)
    
    print(f"‚úÖ –§–∞–π–ª —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {output_path}")